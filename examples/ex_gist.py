{
    "url": "https://api.github.com/gists/ef603579fb9b102f2ac85008ba34b6be",
    "forks_url": "https://api.github.com/gists/ef603579fb9b102f2ac85008ba34b6be/forks",
    "commits_url": "https://api.github.com/gists/ef603579fb9b102f2ac85008ba34b6be/commits",
    "id": "ef603579fb9b102f2ac85008ba34b6be",
    "node_id": "MDQ6R2lzdGVmNjAzNTc5ZmI5YjEwMmYyYWM4NTAwOGJhMzRiNmJl",
    "git_pull_url": "https://gist.github.com/ef603579fb9b102f2ac85008ba34b6be.git",
    "git_push_url": "https://gist.github.com/ef603579fb9b102f2ac85008ba34b6be.git",
    "html_url": "https://gist.github.com/ef603579fb9b102f2ac85008ba34b6be",
    "files": {
        "index.ts": {
            "filename": "index.ts",
            "type": "video/MP2T",
            "language": "TypeScript",
            "raw_url": "https://gist.githubusercontent.com/ry00001/ef603579fb9b102f2ac85008ba34b6be/raw/0413d2f3414e08d19d82accded418233b7a6d891/index.ts",
            "size": 3635,
            "truncated": False,
            "content": """import {EmerilClient} from \'emeril\';\nconst cfg = require(\'../config.json\');\nimport axios, { AxiosRequestConfig, Method } from \'axios\';\nimport DiscordMessage from \'emeril/dist/models/message\';\n\nconst API_BASE = "http://192.168.86.34";\n\nconst PREFIX = \'lights!\';\nlet huetoken = cfg.huekey;\n\nasync function run() {\n\n    const client = await new EmerilClient().setToken(cfg.token).connect();\n\n    client.on(\'ready\', () => {\n        console.log(`ok we\'re good, ${client.me.username}#${client.me.discriminator}`)\n    })\n\n    client.on(\'messageCreate\', async (msg: DiscordMessage) => {\n        if (msg.author.bot) return;\n        if (!msg.guild) return;\n\n        if (!msg.content.startsWith(PREFIX)) return;\n        let h = msg.content.slice(PREFIX.length);\n        let cs = h.split(\' \');\n        let cmd = cs[0];\n\n        switch (cmd) {\n            case \'hueauth\':\n                if (msg.author.id !== \'190544080164487168\') return await msg.channel.createMessage(\'no\');\n                let b = await axios.post(`${API_BASE}/api`, {\n                    devicetype: \'lights-bot#this_fucking_sucks\'\n                })\n                let resp = b.data[0];\n                if (resp.error) {\n                    // well then\n                    if (resp.error.type === 101) {\n                        return await msg.channel.createMessage(\'push the link button dipshit\');\n                    }\n                } else {\n                    huetoken = resp.success.username;\n                    return await msg.channel.createMessage(\'ok, \'+huetoken);\n                }\n                break;\n            case \'setkey\':\n                if (msg.author.id !== \'190544080164487168\') return await msg.channel.createMessage(\'no\');\n                huetoken = cs[1];\n                await msg.channel.createMessage(\'k\');\n                break;\n            case \'request\':\n                if (msg.author.id !== \'190544080164487168\') return await msg.channel.createMessage(\'no\');\n                let method = cs[1];\n                let url = cs[2];\n                let body = cs.slice(3).join(\' \');\n                if (body === \'\') {\n                    body = null;\n                } else {\n                    body = JSON.parse(body);\n                }\n                let n: AxiosRequestConfig = {\n                    method: method as Method,\n                    url: `${API_BASE}/api/${url}`,\n                    data: body\n                }\n                let r = await axios.request(n);\n                console.log(r.data);\n                await msg.channel.createMessage(`${r.data}`);\n                break;\n            case \'power\':\n                let state = (cs[1] === \'on\');\n                await axios.put(`${API_BASE}/api/${huetoken}/lights/1/state`, {on: state});\n                await msg.channel.createMessage(\'ok lights are now \'+(state ? \'on\' : \'off\'));\n                break;\n            case \'hsv\':\n                let hues = cs[1];\n                let sats = cs[2];\n                let bris = cs[3];\n                if (!hues || !sats || !bris) {\n                    return await msg.channel.createMessage(`\\`${PREFIX}hsv h s v\\` (values from 0 to 100 except hue which is 0 to 360)`);\n                }\n                let hue = Math.floor((parseFloat(hues) / 360) * 65536);\n                let sat = Math.floor((parseFloat(sats) / 100) * 255);\n                let bri = Math.floor((parseFloat(bris) / 100) * 255);\n                await axios.put(`${API_BASE}/api/${huetoken}/lights/1/state`, {hue: hue, sat: sat, bri: bri});\n
 await msg.channel.createMessage(\'ok\');\n                break;\n        }\n    });\n\n}\n\nrun();""",
        }
    },
    "public": False,
    "created_at": "2020-12-17T14:39:52Z",
    "updated_at": "2020-12-17T14:39:52Z",
    "description": "the",
    "comments": 0,
    "user": None,
    "comments_url": "https://api.github.com/gists/ef603579fb9b102f2ac85008ba34b6be/comments",
    "owner": {
        "login": "ry00001",
        "id": 15631667,
        "node_id": "MDQ6VXNlcjE1NjMxNjY3",
        "avatar_url": "https://avatars2.githubusercontent.com/u/15631667?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ry00001",
        "html_url": "https://github.com/ry00001",
        "followers_url": "https://api.github.com/users/ry00001/followers",
        "following_url": "https://api.github.com/users/ry00001/following{/other_user}",
        "gists_url": "https://api.github.com/users/ry00001/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ry00001/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ry00001/subscriptions",
        "organizations_url": "https://api.github.com/users/ry00001/orgs",
        "repos_url": "https://api.github.com/users/ry00001/repos",
        "events_url": "https://api.github.com/users/ry00001/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ry00001/received_events",
        "type": "User",
        "site_admin": False,
    },
    "forks": [],
    "history": [
        {
            "user": {
                "login": "ry00001",
                "id": 15631667,
                "node_id": "MDQ6VXNlcjE1NjMxNjY3",
                "avatar_url": "https://avatars2.githubusercontent.com/u/15631667?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ry00001",
                "html_url": "https://github.com/ry00001",
                "followers_url": "https://api.github.com/users/ry00001/followers",
                "following_url": "https://api.github.com/users/ry00001/following{/other_user}",
                "gists_url": "https://api.github.com/users/ry00001/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ry00001/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ry00001/subscriptions",
                "organizations_url": "https://api.github.com/users/ry00001/orgs",
                "repos_url": "https://api.github.com/users/ry00001/repos",
                "events_url": "https://api.github.com/users/ry00001/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ry00001/received_events",
                "type": "User",
                "site_admin": False,
            },
            "version": "0ddb866b9e07291d84cfe6074922b00e13b05d2d",
            "committed_at": "2020-12-17T14:39:52Z",
            "change_status": {"total": 92, "additions": 92, "deletions": 0},
            "url": "https://api.github.com/gists/ef603579fb9b102f2ac85008ba34b6be/0ddb866b9e07291d84cfe6074922b00e13b05d2d",
        }
    ],
    "truncated": False,
}
